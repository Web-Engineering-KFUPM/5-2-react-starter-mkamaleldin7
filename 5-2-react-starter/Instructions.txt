React Starter Lab – Student Info Card

In this lab, you will create a simple React project using Vite. The goal is to understand how to:
- Create React components.
- Learn about the JSX syntax.
- Use props to pass data into components.
- Render components inside the App.jsx file.

------------------------------------------------------------
Setup
------------------------------------------------------------
1. Open VS Code and go to the terminal.
2. Move into the project folder by running: cd 5-2-react-starter
3. Install the required node modules by running: npm install or npm i
4. To see the output, start the development server by running: npm run dev

Note: In order to gain good marks in the lab, please follow the lab instructions strickly.

3. Inside the project folder, go to src and create a new folder called:

   src/components

All your new components will go inside this folder.

------------------------------------------------------------
Task 1 – Create a StudentCard Component
------------------------------------------------------------
Scenario: The school needs a card to display a student’s details.

1. Inside the components folder, create a file called:
   StudentCard.jsx

2. Inside StudentCard.jsx, create a React functional component named StudentCard.

3. The component should return a div that shows:
   - Student’s name (use <h3> tag)
   - Student’s id (use <p> tag)
   - Student’s department (use <p> tag)
   (For now, hardcode these values, e.g., Name: YOUR_NAME, ID: YOUR_STUDENT_ID, Department: YOUR_DEPARTMENT_NAME)

Hints:
- Use the function component syntax:
  function StudentCard() {
    return (
      <div>
       
      </div>
    );
  }

  export default StudentCard;

- To render this component inside your app, import it into App.jsx:
  import StudentCard from './components/StudentCard';

  function App() {
    return (
      <div>
        <h1>Student Info</h1>
        <StudentCard />
      </div>
    );
  }

  export default App;

Expected Output:
A simple card showing a student’s information.

------------------------------------------------------------
Task 2 – Make the Card Dynamic with Props
------------------------------------------------------------
Scenario: The school wants to reuse this card for different students.

1. Update StudentCard.jsx so that it accepts props (name, id, dept).

2. Replace the hardcoded values with the props.
   Example:
   function StudentCard(props) {
     return (
       <div>
         <h3>Name: {props.name}</h3>
         <p>Student ID: {props.id}</p>
         <p>Department: {props.dept}</p>
       </div>
     );
   }

3. Go back to App.jsx and render two StudentCard components, each with different data.
   Example:
   function App() {
     return (
       <div>
         <h1>Student Info</h1>
         <StudentCard name="" id="" dept="" />
         <StudentCard name="" id="" dept="" />
       </div>
     );
   }

Expected Output:
The page should display two student cards, each showing different student details.

------------------------------------------------------------
Summary
------------------------------------------------------------
You have now learned:
- How to create a component.
- How to use props to make it reusable.
- How to render multiple components in App.js.
